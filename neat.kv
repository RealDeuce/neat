# Copyright (c) 2022 Stephen Hurd
# Developers:
# Stephen Hurd (W8BSD/VE5BSD) <shurd@sasktel.net>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice, developer list, and this permission notice shall
# be included in all copies or substantial portions of the Software. If you meet
# us some day, and you think this stuff is worth it, you can buy us a beer in
# return
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

#:kivy 2.1.0
#:import tuningMode kenwood.tuningMode
#:import mode kenwood.mode
#:import meter kenwood.meter

<Neat>:
	size: 1074, 950

	Meter:
		id: smeter
		min_value: 0
		max_value: 30
		size_gauge: 256
		size_text: 20
		rig_state: 'mainSMeter'
		file_gauge: 'gardengauge/smeter.png'
		pos: (root.width - self.size_gauge * 4 - 10 * 3) / 2, root.size[1] - self.size_gauge - 10
		low_format: 'S[b]{0:.0f}[/b]'
		high_format: '+[b]{0:.0f}[/b]'
		calculation: 'S-Level'

	Meter:
		id: SWRmeter
		min_value: 0
		max_value: 30
		size_gauge: 256
		size_text: 20
		rig_state: 'SWRmeter'
		peak_hold: 0
		accel_down_initial: -3
		file_gauge: 'gardengauge/SWR.png'
		pos: smeter.pos[0] + self.size_gauge + 10, smeter.pos[1]
		click_selects: int(meter.SWR)
		low_format: '\nSWR'
		high_format: '\nSWR'

	Meter:
		id: ALCmeter
		min_value: 0
		max_value: 30
		size_gauge: 256
		size_text: 20
		rig_state: 'ALCmeter'
		file_gauge: 'gardengauge/ALC.png'
		pos: SWRmeter.pos[0] + self.size_gauge + 10, SWRmeter.pos[1]
		low_format: '\nALC'
		high_format: '[color=#F00][b]Over[/b][/color]'
		click_selects: int(meter.ALC)

	Meter:
		id: COMPmeter
		min_value: 0
		max_value: 30
		size_gauge: 256
		size_text: 20
		rig_state: 'compressionMeter'
		file_gauge: 'gardengauge/comp.png'
		pos: ALCmeter.pos[0] + self.size_gauge + 10, ALCmeter.pos[1]
		low_cutoff: 11
		low_format: '{0:.0f}\nCompression'
		high_format: '[color=#F00]{0:.0f}[/color]\nCompression'
		click_selects: int(meter.COMPRESSION)

###

	FilterDisplay:
		id: filterDisplay
		size_hint_max: 100, 25
		pos: (root.width - (mainAFgain.pos[0] + mainAFgain.width - self.pos[0])) / 2, COMPmeter._progress.pos[1] - 30 - self.size[1]
		op_mode_box: opModeBox

	HighPassLabel:
		id: highPassLabel
		color: 0.8,0.8,0.8,1
		font_size: 12
		text_size: 588, 12
		size_hint_max: self.text_size
		halign: 'left'
		suffix: 'Hz'
		pos: filterDisplay.pos[0], filterDisplay.pos[1] - self.height - 4

	LowPassLabel:
		id: lowPassLabel
		color: 0.8,0.8,0.8,1
		font_size: 12
		text_size: 588, 12
		size_hint_max: self.text_size
		halign: 'right'
		suffix: 'Hz'
		pos: filterDisplay.pos[0] + filterDisplay.width - self.width, filterDisplay.pos[1] - self.height - 4

	WideNarrowLabel:
		id: wideNarrowLabel
		color: 0.8,0.8,0.8,1
		font_size: 12
		text_size: lowPassLabel.pos[0] + lowPassLabel.width - highPassLabel.pos[0], 12
		size_hint_max: self.text_size
		halign: 'center'
		pos: highPassLabel.pos[0], highPassLabel.pos[1] - self.height - 4

	BoolToggle:
		id: autoNotch
		rig_state: 'autoNotch'
		size_hint_max: 75, 25
		text: 'AN'
		pos: filterDisplay.pos[0] + filterDisplay.width + 10, filterDisplay.pos[1] + filterDisplay.height - self.height

	StateSlider:
		id: autoNotchLevel
		rig_state: 'autoNotchLevel'
		min: 0
		max: 4
		value_track: True
		size_hint_max: autoNotch.width, 25
		pos: autoNotch.pos[0], autoNotch.pos[1] - self.height - 3
		step: 1

	BoolToggle:
		id: autoBeatCanceller
		rig_state: 'autoBeatCanceller'
		size_hint_max: 50, 25
		text: 'ABC'
		pos: autoNotch.pos[0] + autoNotch.width + 10, autoNotch.pos[1]

	BoolToggle:
		id: manualBeatCanceller
		rig_state: 'manualBeatCanceller'
		size_hint_max: 50, 25
		text: 'MBC'
		pos: autoBeatCanceller.pos[0] + autoBeatCanceller.width, autoBeatCanceller.pos[1]

	StateSlider:
		id: manualBeatCancellerFrequency
		rig_state: 'manualBeatCancellerFrequency'
		min: 0
		max: 63
		value_track: True
		size_hint_max: manualBeatCanceller.pos[0] + manualBeatCanceller.width - autoBeatCanceller.pos[0], 25
		pos: autoBeatCanceller.pos[0], manualBeatCanceller.pos[1] - self.height - 3
		step: 1

	BoolToggle:
		id: noiseReduction1
		rig_state: 'noiseReduction1'
		size_hint_max: 50, 25
		text: 'NR1'
		pos: manualBeatCanceller.pos[0] + manualBeatCanceller.width + 10, manualBeatCanceller.pos[1] + manualBeatCanceller.height - self.height
		on_state: noiseReductionLevel.refresh()

	BoolToggle:
		id: noiseReduction2
		rig_state: 'noiseReduction2'
		size_hint_max: 50, 25
		text: 'NR2'
		pos: noiseReduction1.pos[0] + noiseReduction1.width, noiseReduction1.pos[1]
		on_state: noiseReductionLevel.refresh()

	StateSlider:
		id: noiseReductionLevel
		rig_state: 'noiseReductionLevel'
		min: 0
		max: 9
		value_track: True
		size_hint_max: noiseReduction2.pos[0] + noiseReduction2.width - noiseReduction1.pos[0], 25
		pos: noiseReduction1.pos[0], noiseReduction2.pos[1] - self.height - 3
		step: 1

	Label:
		id: mainAFgainLabel
		color: 0.8,0.8,0.8,1
		font_size: 15
		text_size: 588, 15
		size_hint_max: self.text_size
		halign: 'left'
		text: 'AF Gain'
		pos: noiseReduction2.pos[0] + noiseReduction2.width + 10, noiseReduction2.pos[1] + noiseReduction2.height - self.height

	StateSlider:
		rig_state: 'mainAFgain'
		id: mainAFgain
		min: 0
		max: 255
		value_track: True
		size_hint_max: 256, 30
		pos: mainAFgainLabel.pos[0], mainAFgainLabel.pos[1] - self.height
		step: 1

###

	BoolToggle:
		id: RIT
		rig_state: 'RIT'
		size_hint_max: 50, 25
		text: 'RIT'
		pos: XIT.pos[0] - self.width, RITfreq.pos[1] + RITfreq.height
		on_state: noiseReductionLevel.refresh()

	BoolToggle:
		id: XIT
		rig_state: 'XIT'
		size_hint_max: 50, 25
		text: 'XIT'
		pos: RITfreq.pos[0] + RITfreq.width - self.width, RIT.pos[1]
		on_state: noiseReductionLevel.refresh()

	Button:
		id: clearRIT
		size_hint_max: 50, 25
		text: 'CLEAR'
		on_press: root.control(clearRIT = True)
		pos: RITfreq.pos[0] + (RITfreq.width - self.width) / 2 , RIT.pos[1]

	StateLabel:
		id: RITlabel
		color: 0.8,0.8,0.8,1
		font_size: 15
		text_size: 588, 15
		size_hint_max: self.text_size
		halign: 'left'
		text: ''
		rig_state: 'RIT_XITfrequency'
		suffix: 'Hz'
		pos: RITfreq.pos[0], RITfreq.pos[1] + RITfreq.height

	RITSlider:
		id: RITfreq
		rig_state: 'RIT_XITfrequency'
		min: -20000
		max: 20000
		value_track: False
		size_hint_max: mainFreq.width, 25
		pos: mainFreq.pos[0], autoNotchLevel.pos[1] - self.size[1] - 40
		step: 1

###

	VFOBox:
		id: vfoBox
		pos: (mainFreq.pos[0] - self.width - bandUpButton.width - 10) / 2, (mainFreq.pos[1] * 2 + mainFreq.height - self.height) / 2
		size_hint_max: 100, 50
		cols: 2
		rows: 2
		rig_state: 'RXtuningMode'
		freq_display: mainFreq

		VFOBoxButton:
			text: 'VFO A'
			vfoID: int(tuningMode.VFOA)
			state: 'down' if self.parent.vfo == int(tuningMode.VFOA) else 'normal'

		VFOBoxButton:
			text: 'VFO B'
			vfoID: int(tuningMode.VFOB)
			state: 'down' if self.parent.vfo == int(tuningMode.VFOB) else 'normal'

		VFOBoxButton:
			text: 'MEM'
			vfoID: int(tuningMode.MEMORY)
			state: 'down' if self.parent.vfo == int(tuningMode.MEMORY) else 'normal'

		VFOBoxButton:
			text: 'CALL'
			vfoID: int(tuningMode.CALL)
			state: 'down' if self.parent.vfo == int(tuningMode.CALL) else 'normal'

	Button:
		id: bandUpButton
		size_hint_max: 50, 25
		text: 'UP'
		on_press: root.control(bandUp = True)
		pos: vfoBox.pos[0] + vfoBox.width + 10, mainFreq.pos[1] + mainFreq.height - self.height

	Button:
		id: bandDownButton
		size_hint_max: 50, 25
		text: 'DOWN'
		on_press: root.control(bandDown = True)
		pos: bandUpButton.pos[0], bandUpButton.pos[1] - self.height

	BoolToggle:
		rig_state: 'CWautoTune'
		size_hint_max: 50, 25
		text: 'CWA'
		pos: bandDownButton.pos[0], bandDownButton.pos[1] - self.height

	FreqDisplay:
		id: mainFreq
		activeColour: 1.0, 1.0, 1.0, 1.0
		inactiveColour: 0.45, 0.45, 0.45, 1.0
		zeroColour: 0.2, 0.2, 0.2, 1.0
		font_size: 70
		halign: 'right'
		valign: 'top'
		text_size: 588, 70
		size_hint_min: self.text_size
		size_hint_max: self.text_size
		pos: (root.width - self.width) / 2, RITfreq.pos[1] - self.height
		max_lines: 1
		lines: 1
		font_name: 'DroidSansMono'
		freq_display: mainFreq
		op_mode_box: opModeBox
		vfo_box: vfoBox
		memory_display: mainMemory

	MemoryDisplay:
		id: mainMemory
		markup: True
		color: 1,1,1,1
		font_size: 20
		halign: 'left'
		valign: 'top'
		text_size: 588, 24
		size_hint_min: self.text_size
		size_hint_max: self.text_size
		pos: mainFreq.pos[0], mainFreq.pos[1] - 30
		max_lines: 1
		lines: 1
		font_name: 'DroidSansMono'
		freq_display: mainFreq
		vfo_box: vfoBox

	OPModeBox:
		id: opModeBox
		pos: (root.width + mainFreq.pos[0] + mainFreq.width - self.width) / 2, mainFreq.pos[1] + mainFreq.height - self.height
		size_hint_max: 200, 50
		cols: 4
		rows: 2
		on_mode: highPassLabel.refresh(); lowPassLabel.refresh(); wideNarrowLabel.refresh(); noiseBlanker.refresh()
		rig_state: 'mode'

		OPModeBoxButton:
			text: 'USB'
			modeID: int(mode.USB)
			state: 'down' if self.parent.mode == int(mode.USB) else 'normal'

		OPModeBoxButton:
			text: 'CW'
			modeID: int(mode.CW)
			state: 'down' if self.parent.mode == int(mode.CW) else 'normal'

		OPModeBoxButton:
			text: 'AM'
			modeID: int(mode.AM)
			state: 'down' if self.parent.mode == int(mode.AM) else 'normal'

		OPModeBoxButton:
			text: 'FSK'
			modeID: int(mode.FSK)
			state: 'down' if self.parent.mode == int(mode.FSK) else 'normal'

		OPModeBoxButton:
			text: 'LSB'
			modeID: int(mode.LSB)
			state: 'down' if self.parent.mode == int(mode.LSB) else 'normal'

		OPModeBoxButton:
			text: 'CW-R'
			modeID: int(mode.CW_REVERSED)
			state: 'down' if self.parent.mode == int(mode.CW_REVERSED) else 'normal'

		OPModeBoxButton:
			text: 'FM'
			modeID: int(mode.FM)
			state: 'down' if self.parent.mode == int(mode.FM) else 'normal'

		OPModeBoxButton:
			text: 'FSK-R'
			modeID: int(mode.FSK_REVERSED)
			state: 'down' if self.parent.mode == int(mode.FSK_REVERSED) else 'normal'

	BoolToggle:
		rig_state: 'autoMode'
		size_hint_max: opModeBox.width, 25
		text: 'Auto Mode'
		pos: opModeBox.pos[0], opModeBox.pos[1] - self.height

###

	BoolToggle:
		id: attenuatorButton
		rig_state: 'attenuator'
		pos: (root.width - (mainSquelch.pos[0] + mainSquelch.width - self.pos[0])) / 2,  mainMemory.pos[1] - self.height - 30
		size_hint_max: 50, 25
		text: 'ATT'

	BoolToggle:
		id: preAmpButton
		rig_state: 'mainPreAmp'
		pos: attenuatorButton.pos[0], attenuatorButton.pos[1] - self.size[1]
		size_hint_max: 50, 25
		text: 'PRE'

	Label:
		id: rfGainLabel
		color: 0.8,0.8,0.8,1
		font_size: 15
		text_size: 588, 15
		size_hint_max: self.text_size
		halign: 'left'
		text: 'RF Gain'
		# Meter is actually square...
		pos: attenuatorButton.pos[0] + attenuatorButton.size[0] + 10, attenuatorButton.pos[1] + attenuatorButton.height - self.height

	StateSlider:
		id: rfGain
		rig_state: 'RFgain'
		min: 0
		max: 255
		value_track: True
		size_hint_max: 256, 30
		pos: rfGainLabel.pos[0], rfGainLabel.pos[1] - self.height
		step: 1

	BoolToggle:
		id: noiseBlanker
		rig_state: 'noiseBlanker'
		size_hint_max: 75, 25
		text: 'NB'
		pos: rfGain.pos[0] + rfGain.width + 10, rfGainLabel.pos[1] + rfGainLabel.height - self.height

	StateSlider:
		id: noiseBlankerLevel
		rig_state: 'noiseBlankerLevel'
		min: 1
		max: 10
		value_track: True
		size_hint_max: noiseBlanker.size
		pos: noiseBlanker.pos[0], noiseBlanker.pos[1] - self.height - 3
		step: 1

	Label:
		id: AGCconstantLabel
		color: 0.8,0.8,0.8,1
		font_size: 15
		text_size: 588, 15
		size_hint_max: self.text_size
		halign: 'left'
		text: 'AGC Constant'
		pos: noiseBlanker.pos[0] + noiseBlanker.width + 10, noiseBlanker.pos[1] + noiseBlanker.height - self.height

	StateSlider:
		id: AGCconstant
		rig_state: 'AGCconstant'
		min: 0
		max: 20
		value_track: True
		size_hint_max: self.cursor_width + self.max * 4, 30
		pos: AGCconstantLabel.pos[0], AGCconstantLabel.pos[1] - self.height
		step: 1

	Label:
		id: mainSquelchLabel
		color: 0.8,0.8,0.8,1
		font_size: 15
		text_size: 588, 15
		size_hint_max: self.text_size
		halign: 'left'
		text: 'Squelch'
		pos: AGCconstant.pos[0] + AGCconstant.width + 10, AGCconstantLabel.pos[1] + AGCconstantLabel.height - self.height

	StateSlider:
		id: mainSquelch
		rig_state: 'mainSquelch'
		min: 0
		max: 255
		value_track: True
		size_hint_max: 256, 30
		pos: mainSquelchLabel.pos[0], mainSquelchLabel.pos[1] - self.height
		step: 1

	StateLamp:
		id: rxLamp
		rig_state: 'mainBusy'
		active_color: 0, 1, 0, 1
		size_hint_max: 50, 50
		pos: 10, mainSquelchLabel.pos[1] + mainSquelchLabel.height - self.height
		text: 'RX'

#####

	BoolToggle:
		id: powerOn
		rig_state: 'powerOn'
		active_color: 1, 0, 0, 1
		size_hint_max: 50, 50
		pos: 10, antenna2.pos[1]
		halign: 'center'
		text: 'POWER'

	BoolToggle:
		id: antenna1
		rig_state: 'antenna1'
		size_hint_max: 50, 25
		text: 'ANT1'
		pos: (root.width - (tunerOnInRXbutton.pos[0] + tunerOnInRXbutton.width - self.pos[0])) / 2,  noiseBlankerLevel.pos[1] - self.height - 30

	BoolToggle:
		id: antenna2
		rig_state: 'antenna2'
		size_hint_max: 50, 25
		text: 'ANT2'
		pos: antenna1.pos[0], antenna1.pos[1] - self.size[1]

	BoolToggle:
		id: tunerButton
		rig_state: 'tuner'
		pos: antenna1.pos[0] + antenna1.width + 10, antenna1.pos[1]
		size_hint_max: 50, 25
		text: 'AT'

	BoolToggle:
		id: tunerOnInRXbutton
		rig_state: 'tunerOnInRX'
		pos: tunerButton.pos[0] + tunerButton.width, tunerButton.pos[1]
		size_hint_max: 50, 25
		text: 'ON-RX'

	BoolToggle:
		rig_state: 'tunerState'
		id: tuneButton
		pos: (tunerButton.pos[0] + (tunerOnInRXbutton.pos[0] + tunerOnInRXbutton.width)) / 2 - self.width / 2, tunerButton.pos[1] - self.height
		size_hint_max: 50, 25
		text: 'TUNE'

###

	# TODO: RIT (offset?)
	# TODO: Scan stuff
	# TODO: CTCSS/DCS RX stuff
	# TODO: Store and recall various memory types (Quick, Progammable, CALL, "Regular", Range, etc)

	############
	# TX Block #
	############

	StateLamp:
		id: txLamp
		rig_state: 'mainTransmitting'
		active_color: 1, 0, 0, 1
		size_hint_max: 50, 50
		update_meter: smeter
		meter_on: 'gardengauge/cadran.png'
		meter_off: 'gardengauge/smeter.png'
		meter_off_low: 'S[b]{0:.0f}[/b]'
		meter_off_high: '+[b]{0:.0f}[/b]'
		meter_on_low: '{0:.0f}'
		meter_on_high: '{0:.0f}'
		meter_on_calculation: ''
		meter_off_calculation: 'S-Level'
		pos: 10, antenna2.pos[1] - 50 - self.height
		text: 'TX'

	Label:
		id: outputPowerLabel
		color: 0.8,0.8,0.8,1
		font_size: 15
		text_size: 588, 15
		size_hint_max: self.text_size
		halign: 'left'
		text: 'Output Power'
		pos: (root.width - (outputPower.pos[0] + outputPower.width - self.pos[0])) / 2, antenna2.pos[1] - 50 - self.height

	StateSlider:
		rig_state: 'outputPower'
		id: outputPower
		min: 5
		max: 100
		value_track: True
		size_hint_max: self.cursor_width + (self.max - self.min), 30
		pos: outputPowerLabel.pos[0], outputPowerLabel.pos[1] - self.height
		step: 1


###


	VFOBox:
		id: TXvfoBox
		#pos: (mainTXFreq.pos[0] - self.width - bandUpButton.width - 10) / 2, (mainTXFreq.pos[1] * 2 + mainTXFreq.height - self.height) / 2
		pos: (mainTXFreq.pos[0] - self.width - 10) / 2, (mainTXFreq.pos[1] * 2 + mainTXFreq.height - self.height) / 2
		size_hint_max: 100, 50
		cols: 2
		rows: 2
		rig_state: 'mainTXtuningMode'
		freq_display: mainTXFreq

		VFOBoxButton:
			text: 'VFO A'
			vfoID: int(tuningMode.VFOA)
			state: 'down' if self.parent.vfo == int(tuningMode.VFOA) else 'normal'

		VFOBoxButton:
			text: 'VFO B'
			vfoID: int(tuningMode.VFOB)
			state: 'down' if self.parent.vfo == int(tuningMode.VFOB) else 'normal'

		VFOBoxButton:
			text: 'MEM'
			vfoID: int(tuningMode.MEMORY)
			state: 'down' if self.parent.vfo == int(tuningMode.MEMORY) else 'normal'
			force_disabled: not app.rig.memoryVFOsplitEnabled

		VFOBoxButton:
			text: 'CALL'
			vfoID: int(tuningMode.CALL)
			state: 'down' if self.parent.vfo == int(tuningMode.CALL) else 'normal'
			force_disabled: True

# TODO: Add a TS control method
#	Button:
#		id: bandUpButton
#		size_hint_max: 50, 25
#		text: 'UP'
#		on_press: root.control(bandUp = True)
#		pos: TXvfoBox.pos[0] + TXvfoBox.width + 10, mainTXFreq.pos[1] + mainTXFreq.height - self.height

#	Button:
#		id: bandDownButton
#		size_hint_max: 50, 25
#		text: 'DOWN'
#		on_press: root.control(bandDown = True)
#		pos: bandUpButton.pos[0], bandUpButton.pos[1] - self.height

#	BoolToggle:
#		rig_state: 'CWautoTune'
#		size_hint_max: 50, 25
#		text: 'CWA'
#		pos: bandDownButton.pos[0], bandDownButton.pos[1] - self.height

	FreqDisplay:
		id: mainTXFreq
		activeColour: 1.0, 1.0, 1.0, 1.0
		inactiveColour: 0.45, 0.45, 0.45, 1.0
		zeroColour: 0.2, 0.2, 0.2, 1.0
		font_size: 70
		halign: 'right'
		valign: 'top'
		text_size: 588, 70
		size_hint_min: self.text_size
		size_hint_max: self.text_size
		pos: (root.width - self.width) / 2, outputPower.pos[1] - self.size[1] - 30
		max_lines: 1
		lines: 1
		font_name: 'DroidSansMono'
		freq_display: mainTXFreq
		op_mode_box: TXopModeBox
		vfo_box: TXvfoBox
		memory_display: mainTXMemory
		rig_state: 'currentTXfrequency'

	MemoryDisplay:
		id: mainTXMemory
		markup: True
		color: 1,1,1,1
		font_size: 20
		halign: 'left'
		valign: 'top'
		text_size: 588, 24
		size_hint_min: self.text_size
		size_hint_max: self.text_size
		pos: mainTXFreq.pos[0], mainTXFreq.pos[1] - 30
		max_lines: 1
		lines: 1
		font_name: 'DroidSansMono'
		freq_display: mainTXFreq
		vfo_box: TXvfoBox
		is_tx: True

	OPModeBox:
		id: TXopModeBox
		pos: (root.width + mainTXFreq.pos[0] + mainTXFreq.width - self.width) / 2, mainTXFreq.pos[1] + mainTXFreq.height - self.height
		size_hint_max: 200, 50
		cols: 4
		rows: 2
		on_mode: highPassLabel.refresh(); lowPassLabel.refresh(); wideNarrowLabel.refresh(); noiseBlanker.refresh()
		rig_state: 'TXmode'

		OPModeBoxButton:
			text: 'USB'
			modeID: int(mode.USB)
			state: 'down' if self.parent.mode == int(mode.USB) else 'normal'

		OPModeBoxButton:
			text: 'CW'
			modeID: int(mode.CW)
			state: 'down' if self.parent.mode == int(mode.CW) else 'normal'

		OPModeBoxButton:
			text: 'AM'
			modeID: int(mode.AM)
			state: 'down' if self.parent.mode == int(mode.AM) else 'normal'

		OPModeBoxButton:
			text: 'FSK'
			modeID: int(mode.FSK)
			state: 'down' if self.parent.mode == int(mode.FSK) else 'normal'

		OPModeBoxButton:
			text: 'LSB'
			modeID: int(mode.LSB)
			state: 'down' if self.parent.mode == int(mode.LSB) else 'normal'

		OPModeBoxButton:
			text: 'CW-R'
			modeID: int(mode.CW_REVERSED)
			state: 'down' if self.parent.mode == int(mode.CW_REVERSED) else 'normal'

		OPModeBoxButton:
			text: 'FM'
			modeID: int(mode.FM)
			state: 'down' if self.parent.mode == int(mode.FM) else 'normal'

		OPModeBoxButton:
			text: 'FSK-R'
			modeID: int(mode.FSK_REVERSED)
			state: 'down' if self.parent.mode == int(mode.FSK_REVERSED) else 'normal'

	# TODO: Do we need to track TXautoMode?
	#BoolToggle:
	#	rig_state: 'autoMode'
	#	size_hint_max: TXopModeBox.width, 25
	#	text: 'Auto Mode'
	#	pos: TXopModeBox.pos[0], TXopModeBox.pos[1] - self.height

###

	Label:
		id: micGainLabel
		color: 0.8,0.8,0.8,1
		font_size: 15
		text_size: 588, 15
		size_hint_max: self.text_size
		halign: 'left'
		text: 'Microphone Gain'
		pos: (root.width - (monitorLevel.pos[0] + monitorLevel.width - self.pos[0])) / 2, mainTXMemory.pos[1] - 30 - self.height

	StateSlider:
		rig_state: 'microphoneGain'
		id: microphoneGain
		min: 0
		max: 100
		value_track: True
		size_hint_max: self.cursor_width + self.max, 30
		pos: micGainLabel.pos[0], micGainLabel.pos[1] - self.height
		step: 1

	Label:
		id: carGainLabel
		color: 0.8,0.8,0.8,1
		font_size: 15
		text_size: 588, 15
		size_hint_max: self.text_size
		halign: 'left'
		text: 'Carrier Gain'
		pos: microphoneGain.pos[0] + microphoneGain.width + 10, micGainLabel.pos[1]

	StateSlider:
		rig_state: 'carrierGain'
		id: carrierGain
		min: 0
		max: 100
		value_track: True
		size_hint_max: self.cursor_width + self.max, 30
		pos: carGainLabel.pos[0], carGainLabel.pos[1] - self.height
		step: 1

	BoolToggle:
		id: speechProcessor
		rig_state: 'speechProcessor'
		size_hint_max: 50, 25
		text: 'PROC'
		pos: carrierGain.pos[0] + carrierGain.width + 10 + speechProcessorInputLevel.width + 5 - self.width / 2, carGainLabel.pos[1] + carGainLabel.height - self.height
		on_state: noiseReductionLevel.refresh()

	Label:
		id: speechProcessorInputLevelLabel
		color: 0.8,0.8,0.8,1
		font_size: 15
		text_size: 588, 15
		size_hint_max: self.text_size
		halign: 'left'
		text: 'Input Level'
		pos: carrierGain.pos[0] + carrierGain.width + 10, speechProcessor.pos[1]

	StateSlider:
		rig_state: 'speechProcessorInputLevel'
		id: speechProcessorInputLevel
		min: 0
		max: 100
		value_track: True
		size_hint_max: self.cursor_width + self.max, 30
		pos: speechProcessorInputLevelLabel.pos[0], speechProcessorInputLevelLabel.pos[1] - self.height
		step: 1

	Label:
		id: speechProcessorOutputLevelLabel
		color: 0.8,0.8,0.8,1
		font_size: 15
		text_size: speechProcessorOutputLevel.width, 15
		size_hint_max: self.text_size
		halign: 'right'
		text: 'Output Level'
		pos: speechProcessorInputLevel.pos[0] + speechProcessorInputLevel.width + 10, speechProcessorInputLevelLabel.pos[1]

	StateSlider:
		rig_state: 'speechProcessorOutputLevel'
		id: speechProcessorOutputLevel
		min: 0
		max: 100
		value_track: True
		size_hint_max: self.cursor_width + self.max, 30
		pos: speechProcessorOutputLevelLabel.pos[0], speechProcessorOutputLevelLabel.pos[1] - self.height
		step: 1

	Label:
		id: monitorLevelLabel
		color: 0.8,0.8,0.8,1
		font_size: 15
		text_size: 588, 15
		size_hint_max: self.text_size
		halign: 'left'
		text: 'Monitor Level'
		pos: speechProcessorOutputLevel.pos[0] + speechProcessorOutputLevel.width + 10, carGainLabel.pos[1]

	StateSlider:
		rig_state: 'monitorLevel'
		id: monitorLevel
		min: 0
		max: 9
		value_track: True
		size_hint_max: self.cursor_width + self.max * 7, 30
		pos: monitorLevelLabel.pos[0], monitorLevelLabel.pos[1] - self.height
		step: 1
